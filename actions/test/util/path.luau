local Path = require('core/Path')

assert('' == Path:new():to_string())
assert('path/to/smth' == Path:from_segments({ 'path', 'to', 'smth' }):to_string())
assert('path/to/smth' == Path:from_string('path/to/smth'):to_string())
assert('path/smth' == Path:from_string('path/./to/../smth'):normalize():to_string())
assert('../path/to/smth' == Path:from_string('../path/to/smth'):normalize():to_string())
assert('to/smth' == Path:from_string('path/../to/smth'):normalize():to_string())
assert('../to/smth' == Path:from_string('path/../../to/smth'):normalize():to_string())
assert('path/to/smth' == Path:from_string('path/./to/smth/'):normalize():to_string())
assert('/' == Path:from_string('///'):normalize():to_string())
assert('..' == Path:from_string('/../'):normalize():to_string())
assert('..' == Path:from_string('../'):normalize():to_string())
assert('..' == Path:from_string('/..'):normalize():to_string())
assert('..' == Path:from_string('//..//'):normalize():to_string())

assert('one/two/three/four' == Path:from_string('one/two'):join_string('three/four'):normalize():to_string())
assert('one/two/three/four' == Path:from_string('one/two'):join_string('/three/four'):normalize():to_string())
assert('one/two/three/four' == Path:from_string('one/two/'):join_string('three/four'):normalize():to_string())
assert('one/two/three/four' == Path:from_string('one/two/'):join_string('/three/four'):normalize():to_string())

local first, second, third = Path:parse('/first/second/third'):path()
assert('first' == first)
assert('second' == second)
assert('third' == third)
